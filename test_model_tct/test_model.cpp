// ****************** test_model.cpp *******************************
// Generated by TwinCAT Target for MATLAB/Simulink (TE1400)
// MATLAB R2018b (win64)
// TwinCAT 3.1.4022
// TwinCAT Target 1.2.1235
// Beckhoff Automation GmbH & Co. KG     (www.beckhoff.com)
// *************************************************************
/*
 * test_model.cpp
 *
 * Academic License - for use in teaching, academic research, and meeting
 * course requirements at degree granting institutions only.  Not for
 * government, commercial, or other organizational use.
 *
 * Code generation for model "test_model".
 *
 * Model version              : 1.3
 * Simulink Coder version : 9.0 (R2018b) 24-May-2018
 * C++ source code generated on : Wed Mar 13 13:56:52 2019
 *
 * Target selection: TwinCAT.tlc
 * Note: GRT includes extra infrastructure and instrumentation for prototyping
 * Embedded hardware selection: Intel->x86-64 (Windows64)
 * Code generation objectives: Unspecified
 * Validation result: Not run
 */

#include "stdafx.h"
#include "Ctest_model.h"
#include "test_model.h"
#include "test_model_private.h"

void Ctest_model::test_model_output (void)
{
  int32_T i;

  /* Clock: '<Root>/Clock' */
  m_BlockIO.Clock = (&m_SimStruct)->Timing.t[0];

  /* FromWorkspace: '<Root>/From Workspace' */
  {
    real_T *pDataValues = (real_T *) m_DWork.FromWorkspace_PWORK.DataPtr;
    m_BlockIO.FromWorkspace2 = pDataValues[0];
  }

  /* Product: '<Root>/Multiply' */
  m_BlockIO.Multiply = m_BlockIO.Clock * m_BlockIO.FromWorkspace2;

  /* FromWorkspace: '<Root>/From Workspace1' */
  {
    real_T *pDataValues = (real_T *) m_DWork.FromWorkspace1_PWORK.DataPtr;
    m_BlockIO.FromWorkspace2 = pDataValues[0];
  }

  /* Sum: '<Root>/Plus' */
  m_BlockIO.Plus = m_BlockIO.Multiply + m_BlockIO.FromWorkspace2;

  /* FromWorkspace: '<Root>/From Workspace2' */
  {
    real_T *pDataValues = (real_T *) m_DWork.FromWorkspace2_PWORK.DataPtr;
    real_T *pTimeValues = (real_T *) m_DWork.FromWorkspace2_PWORK.TimePtr;
    int_T currTimeIndex = m_DWork.FromWorkspace2_IWORK.PrevIndex;
    real_T t = (&m_SimStruct)->Timing.t[0];

    /* Get index */
    if (t <= pTimeValues[0]) {
      currTimeIndex = 0;
    } else if (t >= pTimeValues[2]) {
      currTimeIndex = 1;
    } else {
      if (t < pTimeValues[currTimeIndex]) {
        while (t < pTimeValues[currTimeIndex]) {
          currTimeIndex--;
        }
      } else {
        while (t >= pTimeValues[currTimeIndex + 1]) {
          currTimeIndex++;
        }
      }
    }

    m_DWork.FromWorkspace2_IWORK.PrevIndex = currTimeIndex;

    /* Post output */
    {
      real_T t1 = pTimeValues[currTimeIndex];
      real_T t2 = pTimeValues[currTimeIndex + 1];
      if (t1 == t2) {
        if (t < t1) {
          m_BlockIO.FromWorkspace2 = pDataValues[currTimeIndex];
        } else {
          m_BlockIO.FromWorkspace2 = pDataValues[currTimeIndex + 1];
        }
      } else {
        real_T f1 = (t2 - t) / (t2 - t1);
        real_T f2 = 1.0 - f1;
        real_T d1;
        real_T d2;
        int_T TimeIndex= currTimeIndex;
        d1 = pDataValues[TimeIndex];
        d2 = pDataValues[TimeIndex + 1];
        m_BlockIO.FromWorkspace2 = (real_T) rtInterpolate(d1, d2, f1, f2);
        pDataValues += 3;
      }
    }
  }

  /* Sum: '<Root>/Plus1' */
  m_BlockIO.Plus1 = m_BlockIO.Plus + m_BlockIO.FromWorkspace2;

  /* S-Function (TcSfunAdsReadWrite): '<Root>/TC ADS Sync Write' */
  {
  }

  /* SignalConversion: '<Root>/TmpSignal ConversionAtTC ADS Sync WriteInport1' */
  for (i = 0; i < 6; i++) {
    m_BlockIO.TmpSignalConversionAtTCADSSyncW[i] = 0U;
  }

  /* End of SignalConversion: '<Root>/TmpSignal ConversionAtTC ADS Sync WriteInport1' */
}

void Ctest_model::test_model_update (void)
{
  /* Update for S-Function (TcSfunAdsReadWrite): '<Root>/TC ADS Sync Write' */
  {
    m_TcAdsSyncWrite.TCADSSyncWrite = m_BlockIO.Plus1;
  }

  /* Update absolute time for base rate */
  /* The "clockTick0" counts the number of times the code of this task has
   * been executed. The absolute time is the multiplication of "clockTick0"
   * and "Timing.stepSize0". Size of "clockTick0" ensures timer will not
   * overflow during the application lifespan selected.
   * Timer of this task consists of two 32 bit unsigned integers.
   * The two integers represent the low bits Timing.clockTick0 and the high bits
   * Timing.clockTickH0. When the low bit overflows to 0, the high bits increment.
   */
  if (!(++(&m_SimStruct)->Timing.clockTick0)) {
    ++(&m_SimStruct)->Timing.clockTickH0;
  }

  (&m_SimStruct)->Timing.t[0] = (&m_SimStruct)->Timing.clockTick0 *
    (&m_SimStruct)->Timing.stepSize0 + (&m_SimStruct)->Timing.clockTickH0 *
    (&m_SimStruct)->Timing.stepSize0 * 4294967296.0;

  {
    /* Update absolute timer for sample time: [0.06s, 0.0s] */
    /* The "clockTick1" counts the number of times the code of this task has
     * been executed. The absolute time is the multiplication of "clockTick1"
     * and "Timing.stepSize1". Size of "clockTick1" ensures timer will not
     * overflow during the application lifespan selected.
     * Timer of this task consists of two 32 bit unsigned integers.
     * The two integers represent the low bits Timing.clockTick1 and the high bits
     * Timing.clockTickH1. When the low bit overflows to 0, the high bits increment.
     */
    if (!(++(&m_SimStruct)->Timing.clockTick1)) {
      ++(&m_SimStruct)->Timing.clockTickH1;
    }

    (&m_SimStruct)->Timing.t[1] = (&m_SimStruct)->Timing.clockTick1 *
      (&m_SimStruct)->Timing.stepSize1 + (&m_SimStruct)->Timing.clockTickH1 *
      (&m_SimStruct)->Timing.stepSize1 * 4294967296.0;
  }
}

void Ctest_model::test_model_initialize (void)
{
  /* Start for FromWorkspace: '<Root>/From Workspace' */
  {
    static real_T pTimeValues0[] = { 0.1 } ;

    static real_T pDataValues0[] = { 0.1 };

    m_DWork.FromWorkspace_PWORK.TimePtr = (void *) pTimeValues0;
    m_DWork.FromWorkspace_PWORK.DataPtr = (void *) pDataValues0;
    m_DWork.FromWorkspace_IWORK.PrevIndex = 0;
  }

  /* Start for FromWorkspace: '<Root>/From Workspace1' */
  {
    static real_T pTimeValues0[] = { 0.0 } ;

    static real_T pDataValues0[] = { 0.0 };

    m_DWork.FromWorkspace1_PWORK.TimePtr = (void *) pTimeValues0;
    m_DWork.FromWorkspace1_PWORK.DataPtr = (void *) pDataValues0;
    m_DWork.FromWorkspace1_IWORK.PrevIndex = 0;
  }

  /* Start for FromWorkspace: '<Root>/From Workspace2' */
  {
    static real_T pTimeValues0[] = { 1.0, 2.0, 3.0 } ;

    static real_T pDataValues0[] = { 1.0, 2.0, 3.0 } ;

    m_DWork.FromWorkspace2_PWORK.TimePtr = (void *) pTimeValues0;
    m_DWork.FromWorkspace2_PWORK.DataPtr = (void *) pDataValues0;
    m_DWork.FromWorkspace2_IWORK.PrevIndex = 0;
  }
}

void Ctest_model::test_model_terminate (void)
{
  /* (no terminate code required) */
}

void Ctest_model::MdlOutputs (int_T tid)
{
  test_model_output();
  UNUSED_PARAMETER(tid);
}

void Ctest_model::MdlUpdate (int_T tid)
{
  test_model_update();
  UNUSED_PARAMETER(tid);
}

void Ctest_model::MdlInitializeSizes (void)
{
}

void Ctest_model::MdlInitializeSampleTimes (void)
{
}

void Ctest_model::MdlInitialize (void)
{
}

void Ctest_model::MdlStart (void)
{
  test_model_initialize();
}

void Ctest_model::MdlTerminate (void)
{
  test_model_terminate();
}

RT_MODEL_test_model_T* Ctest_model::test_model (void)
{
  /* Registration code */

  /* initialize non-finites */
  rt_InitInfAndNaN(sizeof(real_T));

  /* initialize real-time model */



  {
    /* Setup solver object */
    rtsiSetSimTimeStepPtr(&(&m_SimStruct)->solverInfo,
                          &(&m_SimStruct)->Timing.simTimeStep);
    rtsiSetTPtr(&(&m_SimStruct)->solverInfo, &rtmGetTPtr((&m_SimStruct)));
    rtsiSetStepSizePtr(&(&m_SimStruct)->solverInfo,
                       &(&m_SimStruct)->Timing.stepSize0);
    rtsiSetErrorStatusPtr(&(&m_SimStruct)->solverInfo, (&rtmGetErrorStatus
      ((&m_SimStruct))));
    rtsiSetRTModelPtr(&(&m_SimStruct)->solverInfo, (&m_SimStruct));
  }

  rtsiSetSimTimeStep(&(&m_SimStruct)->solverInfo, MAJOR_TIME_STEP);
  rtsiSetSolverName(&(&m_SimStruct)->solverInfo,"FixedStepDiscrete");

  /* Initialize timing info */
  {
    int_T *mdlTsMap = (&m_SimStruct)->Timing.sampleTimeTaskIDArray;
    mdlTsMap[0] = 0;
    mdlTsMap[1] = 1;
    (&m_SimStruct)->Timing.sampleTimeTaskIDPtr = (&mdlTsMap[0]);
    (&m_SimStruct)->Timing.sampleTimes = (&(&m_SimStruct)->Timing.sampleTimesArray[0]);
    (&m_SimStruct)->Timing.offsetTimes = (&(&m_SimStruct)->Timing.offsetTimesArray[0]);

    /* task periods */
    (&m_SimStruct)->Timing.sampleTimes[0] = (0.0);
    (&m_SimStruct)->Timing.sampleTimes[1] = (0.06);

    /* task offsets */
    (&m_SimStruct)->Timing.offsetTimes[0] = (0.0);
    (&m_SimStruct)->Timing.offsetTimes[1] = (0.0);
  }

  rtmSetTPtr((&m_SimStruct), &(&m_SimStruct)->Timing.tArray[0]);

  {
    int_T *mdlSampleHits = (&m_SimStruct)->Timing.sampleHitArray;
    mdlSampleHits[0] = 1;
    mdlSampleHits[1] = 1;
    (&m_SimStruct)->Timing.sampleHits = (&mdlSampleHits[0]);
  }

  rtmSetTFinal((&m_SimStruct), 3.0);
  (&m_SimStruct)->Timing.stepSize0 = 0.06;
  (&m_SimStruct)->Timing.stepSize1 = 0.06;
  (&m_SimStruct)->solverInfoPtr = (&(&m_SimStruct)->solverInfo);
  (&m_SimStruct)->Timing.stepSize = (0.06);
  rtsiSetFixedStepSize(&(&m_SimStruct)->solverInfo, 0.06);
  rtsiSetSolverMode(&(&m_SimStruct)->solverInfo, SOLVER_MODE_SINGLETASKING);

  /* block I/O */
  (&m_SimStruct)->blockIO = ((void *) &m_BlockIO);



  /* states (dwork) */
  (&m_SimStruct)->dwork = ((void *) &m_DWork);



  /* Initialize Sizes */
  (&m_SimStruct)->Sizes.numContStates = (0);/* Number of continuous states */
  (&m_SimStruct)->Sizes.numY = (0);      /* Number of model outputs */
  (&m_SimStruct)->Sizes.numU = (0);      /* Number of model inputs */
  (&m_SimStruct)->Sizes.sysDirFeedThru = (0);/* The model is not direct feedthrough */
  (&m_SimStruct)->Sizes.numSampTimes = (2);/* Number of sample times */
  (&m_SimStruct)->Sizes.numBlocks = (11);/* Number of blocks */
  (&m_SimStruct)->Sizes.numBlockIO = (8);/* Number of block outputs */
  return (&m_SimStruct);
}
